// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/ztx/entp/designsvc
// --out=$(GOPATH)/src/github.com/ztx/entp
// --version=v1.1.0-dirty
//
// API "entp": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"time"
)

// AprovePrLineContext provides the PrLine aprove action context.
type AprovePrLineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrNum   string
	Qty     string
	Payload *AprovePrLinePayload
}

// NewAprovePrLineContext parses the incoming request URL and body, performs validations and creates the
// context used by the PrLine controller aprove action.
func NewAprovePrLineContext(ctx context.Context, service *goa.Service) (*AprovePrLineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AprovePrLineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrNum := req.Params["prNum"]
	if len(paramPrNum) > 0 {
		rawPrNum := paramPrNum[0]
		rctx.PrNum = rawPrNum
	}
	paramQty := req.Params["qty"]
	if len(paramQty) > 0 {
		rawQty := paramQty[0]
		rctx.Qty = rawQty
	}
	return &rctx, err
}

// aprovePrLinePayload is the PrLine aprove action payload.
type aprovePrLinePayload struct {
	ItemCode *string `form:"itemCode,omitempty" json:"itemCode,omitempty" xml:"itemCode,omitempty"`
	Price    *int    `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Qty      *int    `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	Sl       *int    `form:"sl,omitempty" json:"sl,omitempty" xml:"sl,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *aprovePrLinePayload) Validate() (err error) {
	if payload.Sl == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sl"))
	}
	if payload.ItemCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemCode"))
	}
	if payload.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "qty"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	return
}

// Publicize creates AprovePrLinePayload from aprovePrLinePayload
func (payload *aprovePrLinePayload) Publicize() *AprovePrLinePayload {
	var pub AprovePrLinePayload
	if payload.ItemCode != nil {
		pub.ItemCode = *payload.ItemCode
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.Qty != nil {
		pub.Qty = *payload.Qty
	}
	if payload.Sl != nil {
		pub.Sl = *payload.Sl
	}
	return &pub
}

// AprovePrLinePayload is the PrLine aprove action payload.
type AprovePrLinePayload struct {
	ItemCode string `form:"itemCode" json:"itemCode" xml:"itemCode"`
	Price    int    `form:"price" json:"price" xml:"price"`
	Qty      int    `form:"qty" json:"qty" xml:"qty"`
	Sl       int    `form:"sl" json:"sl" xml:"sl"`
}

// Validate runs the validation rules defined in the design.
func (payload *AprovePrLinePayload) Validate() (err error) {

	if payload.ItemCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemCode"))
	}

	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AprovePrLineContext) OK(r *Prheader) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.prheader+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AprovePrLineContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreatePrLineContext provides the PrLine create action context.
type CreatePrLineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrNum   string
	Payload *CreatePrLinePayload
}

// NewCreatePrLineContext parses the incoming request URL and body, performs validations and creates the
// context used by the PrLine controller create action.
func NewCreatePrLineContext(ctx context.Context, service *goa.Service) (*CreatePrLineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreatePrLineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrNum := req.Params["prNum"]
	if len(paramPrNum) > 0 {
		rawPrNum := paramPrNum[0]
		rctx.PrNum = rawPrNum
	}
	return &rctx, err
}

// createPrLinePayload is the PrLine create action payload.
type createPrLinePayload struct {
	ItemCode *string `form:"itemCode,omitempty" json:"itemCode,omitempty" xml:"itemCode,omitempty"`
	Price    *int    `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Qty      *int    `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	Sl       *int    `form:"sl,omitempty" json:"sl,omitempty" xml:"sl,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPrLinePayload) Validate() (err error) {
	if payload.Sl == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sl"))
	}
	if payload.ItemCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemCode"))
	}
	if payload.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "qty"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	return
}

// Publicize creates CreatePrLinePayload from createPrLinePayload
func (payload *createPrLinePayload) Publicize() *CreatePrLinePayload {
	var pub CreatePrLinePayload
	if payload.ItemCode != nil {
		pub.ItemCode = *payload.ItemCode
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.Qty != nil {
		pub.Qty = *payload.Qty
	}
	if payload.Sl != nil {
		pub.Sl = *payload.Sl
	}
	return &pub
}

// CreatePrLinePayload is the PrLine create action payload.
type CreatePrLinePayload struct {
	ItemCode string `form:"itemCode" json:"itemCode" xml:"itemCode"`
	Price    int    `form:"price" json:"price" xml:"price"`
	Qty      int    `form:"qty" json:"qty" xml:"qty"`
	Sl       int    `form:"sl" json:"sl" xml:"sl"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePrLinePayload) Validate() (err error) {

	if payload.ItemCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemCode"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePrLineContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePrLineContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListPrLineContext provides the PrLine list action context.
type ListPrLineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrNum string
}

// NewListPrLineContext parses the incoming request URL and body, performs validations and creates the
// context used by the PrLine controller list action.
func NewListPrLineContext(ctx context.Context, service *goa.Service) (*ListPrLineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListPrLineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrNum := req.Params["prNum"]
	if len(paramPrNum) > 0 {
		rawPrNum := paramPrNum[0]
		rctx.PrNum = rawPrNum
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrLineContext) OK(r PrdetailsCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.prdetails+json; type=collection")
	if r == nil {
		r = PrdetailsCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowPrLineContext provides the PrLine show action context.
type ShowPrLineContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrLineNum string
	PrNum     string
}

// NewShowPrLineContext parses the incoming request URL and body, performs validations and creates the
// context used by the PrLine controller show action.
func NewShowPrLineContext(ctx context.Context, service *goa.Service) (*ShowPrLineContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowPrLineContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrLineNum := req.Params["prLineNum"]
	if len(paramPrLineNum) > 0 {
		rawPrLineNum := paramPrLineNum[0]
		rctx.PrLineNum = rawPrLineNum
	}
	paramPrNum := req.Params["prNum"]
	if len(paramPrNum) > 0 {
		rawPrNum := paramPrNum[0]
		rctx.PrNum = rawPrNum
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPrLineContext) OK(r *Prheader) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.prheader+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPrLineContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreateItemContext provides the item create action context.
type CreateItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateItemPayload
}

// NewCreateItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller create action.
func NewCreateItemContext(ctx context.Context, service *goa.Service) (*CreateItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createItemPayload is the item create action payload.
type createItemPayload struct {
	// Item Code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Name of the item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Unit Of Measure
	Uom *string `form:"uom,omitempty" json:"uom,omitempty" xml:"uom,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createItemPayload) Validate() (err error) {
	if payload.Code == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "code"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Uom == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "uom"))
	}
	return
}

// Publicize creates CreateItemPayload from createItemPayload
func (payload *createItemPayload) Publicize() *CreateItemPayload {
	var pub CreateItemPayload
	if payload.Code != nil {
		pub.Code = *payload.Code
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Uom != nil {
		pub.Uom = *payload.Uom
	}
	return &pub
}

// CreateItemPayload is the item create action payload.
type CreateItemPayload struct {
	// Item Code
	Code string `form:"code" json:"code" xml:"code"`
	// Name of the item
	Name string `form:"name" json:"name" xml:"name"`
	// Unit Of Measure
	Uom string `form:"uom" json:"uom" xml:"uom"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateItemPayload) Validate() (err error) {
	if payload.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "code"))
	}
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Uom == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "uom"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateItemContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateItemContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListItemContext provides the item list action context.
type ListItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller list action.
func NewListItemContext(ctx context.Context, service *goa.Service) (*ListItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListItemContext) OK(r ItemCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.item+json; type=collection")
	if r == nil {
		r = ItemCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowItemContext provides the item show action context.
type ShowItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ItemCode string
}

// NewShowItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller show action.
func NewShowItemContext(ctx context.Context, service *goa.Service) (*ShowItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramItemCode := req.Params["itemCode"]
	if len(paramItemCode) > 0 {
		rawItemCode := paramItemCode[0]
		rctx.ItemCode = rawItemCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowItemContext) OK(r *Item) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.item+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowItemContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// AddLinePrContext provides the pr AddLine action context.
type AddLinePrContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddLinePrPayload
}

// NewAddLinePrContext parses the incoming request URL and body, performs validations and creates the
// context used by the pr controller AddLine action.
func NewAddLinePrContext(ctx context.Context, service *goa.Service) (*AddLinePrContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AddLinePrContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addLinePrPayload is the pr AddLine action payload.
type addLinePrPayload struct {
	// ID of the item
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Item Code
	ItemCode *string `form:"itemCode,omitempty" json:"itemCode,omitempty" xml:"itemCode,omitempty"`
	// price
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Quantity
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// serial number
	Sl *int `form:"sl,omitempty" json:"sl,omitempty" xml:"sl,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addLinePrPayload) Validate() (err error) {
	if payload.Sl == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sl"))
	}
	if payload.ItemCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemCode"))
	}
	if payload.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "qty"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	return
}

// Publicize creates AddLinePrPayload from addLinePrPayload
func (payload *addLinePrPayload) Publicize() *AddLinePrPayload {
	var pub AddLinePrPayload
	if payload.ID != nil {
		pub.ID = payload.ID
	}
	if payload.ItemCode != nil {
		pub.ItemCode = *payload.ItemCode
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.Qty != nil {
		pub.Qty = *payload.Qty
	}
	if payload.Sl != nil {
		pub.Sl = *payload.Sl
	}
	return &pub
}

// AddLinePrPayload is the pr AddLine action payload.
type AddLinePrPayload struct {
	// ID of the item
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Item Code
	ItemCode string `form:"itemCode" json:"itemCode" xml:"itemCode"`
	// price
	Price int `form:"price" json:"price" xml:"price"`
	// Quantity
	Qty int `form:"qty" json:"qty" xml:"qty"`
	// serial number
	Sl int `form:"sl" json:"sl" xml:"sl"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddLinePrPayload) Validate() (err error) {

	if payload.ItemCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemCode"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddLinePrContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddLinePrContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreatePrContext provides the pr create action context.
type CreatePrContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreatePrPayload
}

// NewCreatePrContext parses the incoming request URL and body, performs validations and creates the
// context used by the pr controller create action.
func NewCreatePrContext(ctx context.Context, service *goa.Service) (*CreatePrContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreatePrContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createPrPayload is the pr create action payload.
type createPrPayload struct {
	// pr date
	PrDate *time.Time `form:"prDate,omitempty" json:"prDate,omitempty" xml:"prDate,omitempty"`
	// pr number
	PrNum *string `form:"prNum,omitempty" json:"prNum,omitempty" xml:"prNum,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPrPayload) Validate() (err error) {
	if payload.PrNum == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "prNum"))
	}
	if payload.PrDate == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "prDate"))
	}
	return
}

// Publicize creates CreatePrPayload from createPrPayload
func (payload *createPrPayload) Publicize() *CreatePrPayload {
	var pub CreatePrPayload
	if payload.PrDate != nil {
		pub.PrDate = *payload.PrDate
	}
	if payload.PrNum != nil {
		pub.PrNum = *payload.PrNum
	}
	return &pub
}

// CreatePrPayload is the pr create action payload.
type CreatePrPayload struct {
	// pr date
	PrDate time.Time `form:"prDate" json:"prDate" xml:"prDate"`
	// pr number
	PrNum string `form:"prNum" json:"prNum" xml:"prNum"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePrPayload) Validate() (err error) {
	if payload.PrNum == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "prNum"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePrContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePrContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListPrContext provides the pr list action context.
type ListPrContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListPrContext parses the incoming request URL and body, performs validations and creates the
// context used by the pr controller list action.
func NewListPrContext(ctx context.Context, service *goa.Service) (*ListPrContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListPrContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrContext) OK(r PrheaderCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.prheader+json; type=collection")
	if r == nil {
		r = PrheaderCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowPrContext provides the pr show action context.
type ShowPrContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrNum string
}

// NewShowPrContext parses the incoming request URL and body, performs validations and creates the
// context used by the pr controller show action.
func NewShowPrContext(ctx context.Context, service *goa.Service) (*ShowPrContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowPrContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrNum := req.Params["prNum"]
	if len(paramPrNum) > 0 {
		rawPrNum := paramPrNum[0]
		rctx.PrNum = rawPrNum
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPrContext) OK(r *Prheader) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.prheader+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPrContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

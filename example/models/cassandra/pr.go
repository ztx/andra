// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/ztx/andra/example/design
// --out=$(GOPATH)/src/github.com/ztx/andra/example
// --version=v1.1.0-dirty
//
// API "entp": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package cassandra

import (
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"github.com/ztx/andra/example/app"
	"github.com/ztx/andra/example/models"
	"golang.org/x/net/context"
	"time"
)

type Pr struct {
	*models.Pr
}

//
func (item Pr) ColumnOf(attrib string) string {
	out := ""
	switch attrib {

	case "ApprovedQty":
		out = "approved_qty"
	case "ID":
		out = "id"
	case "PrDate":
		out = "pr_date"
	case "PrNum":
		out = "pr_num"
	}
	return out
}

//Model returns the containing model
func (m *Pr) Model() *models.Pr {
	return m.Pr
}

func (m Pr) InsertCQL() (query string, values []interface{}, err error) {
	query = "INSERT INTO pr_header("
	columns := []string{}
	columnValues := []interface{}{}

	if m.ApprovedQty != nil {
		columns = append(columns, "approved_qty")
		columnValues = append(columnValues, &item.ApprovedQty)
	}

	if m.ID != nil {
		columns = append(columns, "id")
		columnValues = append(columnValues, &item.ID)
	}

	if m.PrDate != nil {
		columns = append(columns, "pr_date")
		columnValues = append(columnValues, &item.PrDate)
	}

	if m.PrNum != nil {
		columns = append(columns, "pr_num")
		columnValues = append(columnValues, &item.PrNum)
	}

	query = query + strings.Join(columns, ",") + ")"
	query = query + " VALUES("
	for range columnValues {
		query = query + "?,"
	}
	//remove trailing ","
	query = query[0 : len(query)-1]
	query = query + ")"
	values = columnValues
	return
}

// CRUD Functions

// Get returns a single Pr as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *PrModel) Get(ctx context.Context, id *int) (*Pr, error) {
	defer goa.MeasureSince([]string{"goa", "db", "pr", "get"}, time.Now())

	var native Pr
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Pr
func (m *PrModel) List(ctx context.Context) ([]*Pr, error) {
	defer goa.MeasureSince([]string{"goa", "db", "pr", "list"}, time.Now())

	var objs []*Pr
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *PrModel) Add(ctx context.Context, model *Pr) error {
	defer goa.MeasureSince([]string{"goa", "db", "pr", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Pr", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *PrModel) Update(ctx context.Context, model *Pr) error {
	defer goa.MeasureSince([]string{"goa", "db", "pr", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Pr", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *PrModel) Delete(ctx context.Context, id *int) error {
	defer goa.MeasureSince([]string{"goa", "db", "pr", "delete"}, time.Now())

	var obj Pr

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Pr", "error", err.Error())
		return err
	}

	return nil
}

// PrFromCreatePrPayload Converts source CreatePrPayload to target Pr model
// only copying the non-nil fields from the source.
func PrFromCreatePrPayload(payload *app.CreatePrPayload) *Pr {
	pr := &Pr{}

	return pr
}

// UpdateFromCreatePrPayload applies non-nil changes from CreatePrPayload to the model and saves it
func (m *PrModel) UpdateFromCreatePrPayload(ctx context.Context, payload *app.CreatePrPayload, id *int) error {
	defer goa.MeasureSince([]string{"goa", "db", "pr", "updatefromcreatePrPayload"}, time.Now())

	var obj Pr
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Pr", "error", err.Error())
		return err
	}

	err = m.Db.Save(&obj).Error
	return err
}

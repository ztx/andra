// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/ztx/andra/example/design
// --out=$(GOPATH)/src/github.com/ztx/andra/example
// --version=v1.1.0-dirty
//
// API "entp": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"errors"
	"github.com/ztx/andra/example/app"
	"golang.org/x/net/context"
	"log"
)

// Model for PR lines
type PrLine struct {
	ID       *int `gocql:"primary_key"` // primary key
	ItemCode *string
	PrID     *int // Belongs To Pr
	Price    *int
	Qty      *int
	Sl       *int
	Pr       Pr
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m PrLine) TableName() string {

	return "pr_line"
}

//ValueHolders return a collection of struct field pointers
//specified by the param list
func (m *PrLine) ValueHolders(attribs ...string) []interface{} {
	var i interface{}
	var val []interface{}
	for _, v := range attribs {
		i = m.ValueHolder(v)
		if i != nil {
			val = append(val, v)
		} else {
			log.Println("Error: No such attribute ", v)
			panic("Error: No such attribute ")
		}
	}
	return val
}

//ValueHolder returns the pointer to struct field identified by name; can be used to
//store the scanned value from db
func (m *PrLine) ValueHolder(attrib string) interface{} {
	var out interface{}
	switch attrib {

	case "ID":
		out = &m.ID

	case "ItemCode":
		out = &m.ItemCode

	case "PrID":
		out = &m.PrID

	case "Price":
		out = &m.Price

	case "Qty":
		out = &m.Qty

	case "Sl":
		out = &m.Sl

	}
	return out
}

//Validate will validate a model
func (m *PrLine) Validate() bool {
	if m.ID == nil {
		log.Println(errors.New("Some null fields are found which should not be null"))
		return false
	}

	return true
}

//validates by comparing 2 models
func (im PrLineModel) Validate(m1, m2 PrLine) bool {

	return m1.ID == m2.ID &&
		m1.Validate() && m2.Validate()

}

//Returns true for read only attributes
func (item PrLine) ReadOnly(attrib string) bool {
	switch attrib {
	case "ID":
		return true
	}
	return false
}

// PrLineModel is the implementation of the storage interface for
// PrLine.
type PrLineModel struct {
}

// NewPrLineModel creates a new storage type.
func NewPrLineModel() *PrLineModel {

	return &PrLineModel{}
}

// PrLineStorage represents the storage interface.
type PrLineStorage interface {
	List(ctx context.Context) ([]*PrLine, error)
	Get(ctx context.Context, id *int) (*PrLine, error)
	Add(ctx context.Context, prline *PrLine) error
	Update(ctx context.Context, prline *PrLine) error
	Delete(ctx context.Context, id *int) error

	ListPrdetails(ctx context.Context, prID int) []*app.Prdetails
	OnePrdetails(ctx context.Context, id *int, prID int) (*app.Prdetails, error)

	UpdateFromCreatePrLinePayload(ctx context.Context, payload *app.CreatePrLinePayload, id *int) error
}
